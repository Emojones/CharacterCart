// <auto-generated />
using CharacterCart.DAL.EfStructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CharacterCart.DAL.EfStructures.Migrations
{
    [DbContext(typeof(CharacterCartContext))]
    [Migration("20180427133921_ModelAddFk")]
    partial class ModelAddFk
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CharacterCart.Models.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CharacterName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CharacterRaceId");

                    b.Property<int>("ClassId");

                    b.Property<int>("PlayerId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("WeaponId");

                    b.HasKey("Id");

                    b.HasIndex("CharacterRaceId");

                    b.HasIndex("ClassId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("WeaponId");

                    b.ToTable("Character","CharacterCart");
                });

            modelBuilder.Entity("CharacterCart.Models.Entities.CharacterRaces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CharacterRacesName")
                        .HasMaxLength(50);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("CharacterRaces","CharacterCart");
                });

            modelBuilder.Entity("CharacterCart.Models.Entities.Classes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassImage");

                    b.Property<string>("ClassesName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsArcaneCaster");

                    b.Property<bool>("IsDivineCaster");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Classes","CharacterCart");
                });

            modelBuilder.Entity("CharacterCart.Models.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserName")
                        .IsConcurrencyToken()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("Player","CharacterCart");
                });

            modelBuilder.Entity("CharacterCart.Models.Entities.Weapons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsRanged");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("WeaponImage");

                    b.Property<string>("WeaponName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Weapons","CharacterCart");
                });

            modelBuilder.Entity("CharacterCart.Models.Entities.Character", b =>
                {
                    b.HasOne("CharacterCart.Models.Entities.CharacterRaces", "CharactersRaces")
                        .WithMany()
                        .HasForeignKey("CharacterRaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CharacterCart.Models.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CharacterCart.Models.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CharacterCart.Models.Entities.Weapons", "Weapons")
                        .WithMany()
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
